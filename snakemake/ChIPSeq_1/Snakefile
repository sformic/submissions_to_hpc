configfile : "/g/boulard/sformich/analyses/H3K4me3_Ren_Snyder/config.yaml"
FILTER="primary_" if config["do_keep_primary_rm_suppl"] else ""

rule all:
  input:
    expand("{path}qc/{sample}_fastqc.html", path=config["output_dir"], sample=config["samples"]),
    expand("{path}bam_files/{{fastq_name}}_maj_chr_picardreordered_duplrem.bam", path=config["output_dir"])

rule fastqc_my_fastq:
  input:
    expand("{path}{{fastq_name}}.gz", path=config["fastq_input_dir"])
  params:
    output_dir=expand("{path}qc/", path=config["output_dir"])
  output:
    expand("{path}qc/{{fastq_name}}_fastqc.{ext}", path=config["output_dir"], ext=["html", "zip"])
  shell:
    "fastqc -o {params.output_dir} {input}"

rule trimgalore_my_fastq:
  input:
     expand("{path}{{fastq_name}}.gz", path=config["fastq_input_dir"])
  output:
    trimmed_fq=expand("{path}trimmed_reads/{{fastq_name}}_trimmed.fq.gz", path=config["output_dir"])
  params:
    output_dir=expand("{path}trimmed_reads/", path=config["output_dir"])
  shell:
    "trim_galore -q 20 --stringency 1 -e 0.1 --length 20 --fastqc --basename {wildcards.fastq_name} -o {params.output_dir} {input}"

rule bowtie2_aligned_sorted_bam:
  input:
    rules.trimgalore_my_fastq.output.trimmed_fq
  output:
    mapped_bam=temp(expand("{path}bam_files/{{fastq_name}}_bowtie2.bam", path=config["output_dir"])),
    mapping_stats=expand("{path}stats/{{fastq_name}}_bowtie2_stats.txt", path=config["output_dir"]),
    sorted_bam=expand("{path}bam_files/{{fastq_name}}_bowtie2_sorted.bam", path=config["output_dir"])
  params:
    genome_index_file=config["genome_index"]
  run:
    shell("bowtie2 -x {params.genome_index_file} -U {input} --no-unal 1> {output.mapped_bam} 2> {output.mapping_stats}")
    shell("samtools sort -o {output.sorted_bam} {output.mapped_bam}")

if config["do_keep_primary_rm_suppl"]:
  rule keep_primary_rm_suppl:
    input:
      rules.bowtie2_aligned_sorted_bam.output.sorted_bam
    output:
      expand("{path}bam_files/{{fastq_name}}_sorted_primary.bam", path=config["output_dir"])
    shell:
      "samtools view -b -F /256|272|2048/ -o {output} {input}"

rule keep_only_maj_chr:
  input:
    rules.keep_primary_rm_suppl.output if config["do_keep_primary_rm_suppl"] else rules.bowtie2_aligned_sorted_bam.output.sorted_bam
  output:
    expand("{path}bam_files/{{fastq_name}}_sorted_primary_maj_chr.bam", path=config["output_dir"]) if config["do_keep_primary_rm_suppl"] else expand("{path}bam_files/{{fastq_name}}_sorted_maj_chr.bam", path=config["output_dir"])
  params:
    maj_chr_bed=config["maj_chr_bed"]
  shell:
     "samtools view -h -b -L {params.maj_chr_bed} -o {output} {input}"

if config["do_remove_dupl"]:
  rule remove_dupl:
    input:
      rules.keep_only_maj_chr.output
    output:
      picard_reordered_bam=temp(expand("{path}bam_files/{{fastq_name}}_maj_chr_picardreordered.bam", path=config["output_dir"]))
      dupl_rem_bam=expand("{path}bam_files/{{fastq_name}}_maj_chr_picardreordered_duplrem.bam", path=config["output_dir"])
      dupl_metrics_file=expand("{path}stats/{{fastq_name}}_dupl_metrics.txt", path=config["output_dir"])
    params:
      genome_fasta=config["genome_fasta"]
    run:
      shell("""picard ReorderSam INPUT={input} OUTPUT={output.picard_reordered_bam} REFERENCE={params.genome_fasta} ALLOW_INCOMPLETE_DICT_CONCORDANCE="true" ALLOW_CONTIG_LENGTH_DISCORDANCE="false"  VALIDATION_STRINGENCY="LENIENT" QUIET=true VERBOSITY=ERROR""")
      shell("""picard MarkDuplicates INPUT={output.picard_reordered_bam} OUTPUT={output.dupl_rem_bam} METRICS_FILE={output.dupl_metrics_file} REMOVE_DUPLICATES="true" ASSUME_SORTED="true" DUPLICATE_SCORING_STRATEGY="SUM_OF_BASE_QUALITIES" READ_NAME_REGEX="[a-zA-Z0-9    ]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*." OPTICAL_DUPLICATE_PIXEL_DISTANCE="100" VALIDATION_STRINGENCY="LENIENT" QUIET=true VERBOSITY=ERROR""")

rule bam_coverage:
  input:
    rules.do_remove_dupl.output.dupl_rem_bam if config["do_remove_dupl"] else rules.keep_only_maj_chr.output
  output:
    bigwig=expand("{path}bigwigs/{{fastq_name}}_coverage", path=config["output_dir"])
	plot=expand("{path}qc/{{fastq_name}}_coverage", path=config["output_dir"])
  params:
    effective_genome_size=config["effective_genome_size"]
  run:
    shell("bamCoverage --bam {input} --outFileName {output.bigwig} --outFileFormat bigwig --binSize 50 --normalizeUsing RPGC --effectiveGenomeSize {params.effective_genome_size}")
    shell("plotCoverage --bamfiles {input} --plotFile {output.plot} --plotFileFormat png")

rule plot_fingerprint:
  input:
    rules.bam_coverage.input
  output:
    expand("{path}qc/{{fastq_name}}_fingerprint", path=config["output_dir"])
  shell:
    "plotFingerprint  -b {input} --minMappingQuality 30 --numberOfSamples 100000 --plotFile {output} --plotFileFormat png"

rule hiddenDomains_broad_peak_calling:
  input:
    PSEUDOCODE START
	bam_file=rules.do_remove_dupl.output.dupl_rem_bam if config["do_remove_dupl"] else rules.keep_only_maj_chr.output
	sample_type=$(basename $treatment_file | sed 's/_trimgalore_bowtie2_.*$//')
	SRR_id=$(basename $treatment_file | sed 's/.*dupremoved_SRR/SRR/' | sed ' s/\..*$//')
    if [[ ! "$(basename $treatment_file)" =~ control && ! "$(basename $treatment_file)" =~ input ]]; then
	 ls $bam_input_dir | if egrep -q 'control|input && $sample_type'; then
	 input_file=$(ls $bam_input_dir | awk '/picardreorder_/' | egrep 'control|input && $sample_type')
     srun /g/funcgen/bin/hiddenDomains -g $chr_sizes_file -b $custom_bin_size -t $treatment_file -c $bam_input_dir/$input_file -o $sample_type.$SRR_id.$custom_bin_size
    else
	 srun /g/funcgen/bin/hiddenDomains -g $chr_sizes_file -b $custom_bin_size -t $treatment_file -o $sample_type.$SRR_id.$custom_bin_size
	fi
	else
	PSEUDOCODE END

  output:
    expand("{path}hiddenDomains/{{fastq_name}}_{bin_size}", path=config["output_dir"], bin_size=config["hiddenDomains_bin_size"])
  params:
    chr_sizes_file=config["chr_sizes_file"]
    bin_size=config["hiddenDomains_bin_size"]
  shell:
    hiddenDomains -g {params.chr_sizes_file} -b {params.bin_size} -t $treatment_file -o $sample_type.$SRR_id.$custom_bin_size
